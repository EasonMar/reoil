{
	"id": 0,
	"name": "reoil",
	"kind": 0,
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 300,
			"name": "\"Avatar\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/yokiijay/Code/reoil/src/Avatar.tsx",
			"children": [
				{
					"id": 301,
					"name": "AvatarProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 334,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 335,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 364,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 365,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 367,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 369,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 371,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 373,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 375,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 378,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 380,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 385,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 386,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 388,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 397,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 402,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 403,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 405,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 407,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 408,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 410,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 412,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 413,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 416,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 418,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 421,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 422,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 428,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 430,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 432,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 434,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 435,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 439,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 450,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 456,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 458,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 460,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 462,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 464,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 465,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 468,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						}
					],
					"children": [
						{
							"id": 390,
							"name": "alignContent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The CSS align-content property sets how the browser distributes space between and around content items\nalong the cross-axis of a flexbox container, and the main-axis of a grid container.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 574,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.AlignContentProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 146,
								"name": "AlignContentProps.alignContent"
							}
						},
						{
							"id": 389,
							"name": "alignItems",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The CSS align-items property sets the align-self value on all direct children as a group. The align-self\nproperty sets the alignment of an item within its containing block.",
								"text": "In Flexbox it controls the alignment of items on the Cross Axis, in Grid Layout it controls the alignment\nof items on the Block Axis within their grid area.\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 562,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.AlignItemsProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 145,
								"name": "AlignItemsProps.alignItems"
							}
						},
						{
							"id": 400,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The align-self CSS property aligns flex items of the current flex line overriding the align-items value.",
								"text": "If any of the item's cross-axis margin is set to auto, then align-self is ignored. In Grid layout align-self\naligns the item inside the grid area.\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 670,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.AlignSelfProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 157,
								"name": "AlignSelfProps.alignSelf"
							}
						},
						{
							"id": 326,
							"name": "alignX",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 65,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CSS.JustifyContentProperty"
									},
									{
										"type": "reference",
										"name": "CSS.AlignItemsProperty"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 82,
								"name": "BoxProps.alignX"
							}
						},
						{
							"id": 327,
							"name": "alignY",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 66,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CSS.JustifyContentProperty"
									},
									{
										"type": "reference",
										"name": "CSS.AlignItemsProperty"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 83,
								"name": "BoxProps.alignY"
							}
						},
						{
							"id": 414,
							"name": "background",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The background shorthand CSS property sets all background style properties at once,\nsuch as color, image, origin and size, repeat method, and others.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/background)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1290,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BackgroundProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 171,
								"name": "BackgroundProps.background"
							}
						},
						{
							"id": 467,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 322,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "colors"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 225,
								"name": "BackgroundColorProps.backgroundColor"
							}
						},
						{
							"id": 415,
							"name": "backgroundImage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The background-image CSS property sets one or more background images on an element.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/background-image)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1238,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.BackgroundImageProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 172,
								"name": "BackgroundImageProps.backgroundImage"
							}
						},
						{
							"id": 419,
							"name": "backgroundPosition",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The background-position CSS property sets the initial position for each background image. The\nposition is relative to the position layer set by background-origin.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1262,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BackgroundPositionProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 176,
								"name": "BackgroundPositionProps.backgroundPosition"
							}
						},
						{
							"id": 420,
							"name": "backgroundRepeat",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The background-repeat CSS property sets how background images are repeated. A background\nimage can be repeated along the horizontal and vertical axes, or not repeated at all.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1274,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.BackgroundRepeatProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 177,
								"name": "BackgroundRepeatProps.backgroundRepeat"
							}
						},
						{
							"id": 417,
							"name": "backgroundSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The background-size CSS property sets the size of the element's background image. The\nimage can be left to its natural size, stretched, or constrained to fit the available space.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/background-size)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1250,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BackgroundSizeProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 174,
								"name": "BackgroundSizeProps.backgroundSize"
							}
						},
						{
							"id": 466,
							"name": "bg",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The color utility parses a component's `color` and `bg` props and converts them into CSS declarations.\nBy default the raw value of the prop is returned.",
								"text": "Color palettes can be configured with the ThemeProvider to use keys as prop values, with support for dot notation.\nArray values are converted into responsive values.\n\n[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 321,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "colors"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 224,
								"name": "BackgroundColorProps.bg"
							}
						},
						{
							"id": 436,
							"name": "border",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border CSS property sets an element's border. It's a shorthand for border-width, border-style,\nand border-color.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1153,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BorderProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 193,
								"name": "BorderProps.border"
							}
						},
						{
							"id": 461,
							"name": "borderBottom",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-bottom CSS property sets an element's bottom border. It's a shorthand for\nborder-bottom-width, border-bottom-style and border-bottom-color.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1071,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BorderBottomProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 219,
								"name": "BorderBottomProps.borderBottom"
							}
						},
						{
							"id": 453,
							"name": "borderBottomColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-bottom-color CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties border-color or border-bottom.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-color)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1023,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "colors"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 210,
								"name": "BorderColorProps.borderBottomColor"
							}
						},
						{
							"id": 426,
							"name": "borderBottomLeftRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-bottom-left-radius CSS property rounds the bottom-left corner of an element.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1113,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "radii"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 183,
								"name": "BorderRadiusProps.borderBottomLeftRadius"
							}
						},
						{
							"id": 427,
							"name": "borderBottomRightRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-bottom-right-radius CSS property rounds the bottom-right corner of an element.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1119,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "radii"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 184,
								"name": "BorderRadiusProps.borderBottomRightRadius"
							}
						},
						{
							"id": 447,
							"name": "borderBottomStyle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-bottom-style CSS property sets the line style of an element's bottom border.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-style)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 988,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.BorderBottomStyleProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 204,
								"name": "BorderStyleProps.borderBottomStyle"
							}
						},
						{
							"id": 442,
							"name": "borderBottomWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-bottom-width CSS property sets the width of the bottom border of an element.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 953,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "borderWidths"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 199,
								"name": "BorderWidthProps.borderBottomWidth"
							}
						},
						{
							"id": 330,
							"name": "borderBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 69,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 86,
								"name": "BoxProps.borderBox"
							}
						},
						{
							"id": 451,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-color shorthand CSS property sets the color of all sides of an element's border.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1011,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "colors"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 208,
								"name": "BorderColorProps.borderColor"
							}
						},
						{
							"id": 463,
							"name": "borderLeft",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-left CSS property is a shorthand that sets the values of border-left-width,\nborder-left-style, and border-left-color. These properties describe an element's left border.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1083,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BorderLeftProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 221,
								"name": "BorderLeftProps.borderLeft"
							}
						},
						{
							"id": 454,
							"name": "borderLeftColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-left-color CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties border-color or border-left.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-color)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1029,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "colors"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 211,
								"name": "BorderColorProps.borderLeftColor"
							}
						},
						{
							"id": 448,
							"name": "borderLeftStyle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-left-style CSS property sets the line style of an element's left border.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-style)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 994,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.BorderLeftStyleProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 205,
								"name": "BorderStyleProps.borderLeftStyle"
							}
						},
						{
							"id": 443,
							"name": "borderLeftWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-left-width CSS property sets the width of the left border of an element.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 959,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "borderWidths"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 200,
								"name": "BorderWidthProps.borderLeftWidth"
							}
						},
						{
							"id": 423,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-radius CSS property rounds the corners of an element's outer border edge. You can set a single\nradius to make circular corners, or two radii to make elliptical corners.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1095,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "radii"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 180,
								"name": "BorderRadiusProps.borderRadius"
							}
						},
						{
							"id": 459,
							"name": "borderRight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-right CSS property is a shorthand that sets border-right-width, border-right-style,\nand border-right-color. These properties set an element's right border.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1059,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BorderRightProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 217,
								"name": "BorderRightProps.borderRight"
							}
						},
						{
							"id": 455,
							"name": "borderRightColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-right-color CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties border-color or border-right.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-color)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1035,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "colors"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 212,
								"name": "BorderColorProps.borderRightColor"
							}
						},
						{
							"id": 449,
							"name": "borderRightStyle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-right-style CSS property sets the line style of an element's right border.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-style)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1000,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.BorderRightStyleProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 206,
								"name": "BorderStyleProps.borderRightStyle"
							}
						},
						{
							"id": 444,
							"name": "borderRightWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-right-width CSS property sets the width of the right border of an element.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 965,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "borderWidths"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 201,
								"name": "BorderWidthProps.borderRightWidth"
							}
						},
						{
							"id": 445,
							"name": "borderStyle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-style shorthand CSS property sets the style of all sides of an element's border.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 976,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.BorderStyleProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 202,
								"name": "BorderStyleProps.borderStyle"
							}
						},
						{
							"id": 457,
							"name": "borderTop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-top CSS property is a shorthand that sets the values of border-top-width, border-top-style,\nand border-top-color. These properties describe an element's top border.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1047,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BorderTopProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 215,
								"name": "BorderTopProps.borderTop"
							}
						},
						{
							"id": 452,
							"name": "borderTopColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-top-color CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties border-color or border-top.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-color)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1017,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "colors"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 209,
								"name": "BorderColorProps.borderTopColor"
							}
						},
						{
							"id": 424,
							"name": "borderTopLeftRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-top-left-radius CSS property rounds the top-left corner of an element.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1101,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "radii"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 181,
								"name": "BorderRadiusProps.borderTopLeftRadius"
							}
						},
						{
							"id": 425,
							"name": "borderTopRightRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-top-right-radius CSS property rounds the top-right corner of an element.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1107,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "radii"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 182,
								"name": "BorderRadiusProps.borderTopRightRadius"
							}
						},
						{
							"id": 446,
							"name": "borderTopStyle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-top-style CSS property sets the line style of an element's top border.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-style)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 982,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.BorderTopStyleProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 203,
								"name": "BorderStyleProps.borderTopStyle"
							}
						},
						{
							"id": 441,
							"name": "borderTopWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-top-width CSS property sets the width of the top border of an element.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 947,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "borderWidths"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 198,
								"name": "BorderWidthProps.borderTopWidth"
							}
						},
						{
							"id": 440,
							"name": "borderWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-width shorthand CSS property sets the width of all sides of an element's border.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 941,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "borderWidths"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 197,
								"name": "BorderWidthProps.borderWidth"
							}
						},
						{
							"id": 437,
							"name": "borderX",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1154,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BorderProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 194,
								"name": "BorderProps.borderX"
							}
						},
						{
							"id": 438,
							"name": "borderY",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1155,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BorderProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 195,
								"name": "BorderProps.borderY"
							}
						},
						{
							"id": 308,
							"name": "bottom",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 47,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 64,
								"name": "BoxProps.bottom"
							}
						},
						{
							"id": 429,
							"name": "boxShadow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The box-shadow CSS property adds shadow effects around an element's frame. You can set multiple effects separated\nby commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii and color.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1167,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "CSS.BoxShadowProperty"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 186,
								"name": "BoxShadowProps.boxShadow"
							}
						},
						{
							"id": 329,
							"name": "boxSizing",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 68,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "CSS.BoxSizingProperty"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 85,
								"name": "BoxProps.boxSizing"
							}
						},
						{
							"id": 304,
							"name": "center",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 43,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 60,
								"name": "BoxProps.center"
							}
						},
						{
							"id": 313,
							"name": "colAround",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 52,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 69,
								"name": "BoxProps.colAround"
							}
						},
						{
							"id": 311,
							"name": "colBetween",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 50,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 67,
								"name": "BoxProps.colBetween"
							}
						},
						{
							"id": 315,
							"name": "colEvenly",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 71,
								"name": "BoxProps.colEvenly"
							}
						},
						{
							"id": 316,
							"name": "color",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 55,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "TextColorProps.color"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 72,
								"name": "BoxProps.color"
							}
						},
						{
							"id": 331,
							"name": "contentBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 70,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 87,
								"name": "BoxProps.contentBox"
							}
						},
						{
							"id": 321,
							"name": "cover",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 60,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 77,
								"name": "BoxProps.cover"
							}
						},
						{
							"id": 377,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The display CSS property defines the display type of an element, which consists of the two basic qualities\nof how an element generates boxes — the outer display type defining how the box participates in flow layout,\nand the inner display type defining how the children of the box are laid out.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/display)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 453,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.DisplayProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 133,
								"name": "DisplayProps.display"
							}
						},
						{
							"id": 320,
							"name": "fit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 59,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "CSS.ObjectFitProperty"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 76,
								"name": "BoxProps.fit"
							}
						},
						{
							"id": 387,
							"name": "flex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The flex CSS property specifies how a flex item will grow or shrink so as to fit the space available in\nits flex container. This is a shorthand property that sets flex-grow, flex-shrink, and flex-basis.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/flex)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 644,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.FlexProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 143,
								"name": "FlexProps.flex"
							}
						},
						{
							"id": 398,
							"name": "flexBasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 620,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.FlexBasisProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 155,
								"name": "FlexBasisProps.flexBasis"
							}
						},
						{
							"id": 394,
							"name": "flexDirection",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The flex-direction CSS property specifies how flex items are placed in the flex container defining the main\naxis and the direction (normal or reversed).",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 632,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.FlexDirectionProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 150,
								"name": "FlexDirectionProps.flexDirection"
							}
						},
						{
							"id": 395,
							"name": "flexGrow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The flex-grow CSS property sets the flex grow factor of a flex item main size. It specifies how much of the\nremaining space in the flex container should be assigned to the item (the flex grow factor).",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 694,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.GlobalsNumber"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 152,
								"name": "FlexGrowProps.flexGrow"
							}
						},
						{
							"id": 396,
							"name": "flexShrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The flex-shrink CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger\nthan the flex container, items shrink to fit according to flex-shrink.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 706,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.GlobalsNumber"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 153,
								"name": "FlexShrinkProps.flexShrink"
							}
						},
						{
							"id": 393,
							"name": "flexWrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The flex-wrap CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines.\nIf wrapping is allowed, it sets the direction that lines are stacked.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 610,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.FlexWrapProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 149,
								"name": "FlexWrapProps.flexWrap"
							}
						},
						{
							"id": 406,
							"name": "fontFamily",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 357,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.FontFamilyProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 163,
								"name": "FontFamilyProps.fontFamily"
							}
						},
						{
							"id": 404,
							"name": "fontSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The fontSize utility parses a component's `fontSize` prop and converts it into a CSS font-size declaration.",
								"text": "- Numbers from 0-8 (or `theme.fontSizes.length`) are converted to values on the [font size scale](#default-theme).\n- Numbers greater than `theme.fontSizes.length` are converted to raw pixel values.\n- String values are passed as raw CSS values.\n- And array values are converted into responsive values.\n\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 351,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "fontSizes"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 161,
								"name": "FontSizeProps.fontSize"
							}
						},
						{
							"id": 411,
							"name": "fontStyle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The font-style CSS property specifies whether a font should be styled with a normal, italic,\nor oblique face from its font-family.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 407,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.FontStyleProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 168,
								"name": "FontStyleProps.fontStyle"
							}
						},
						{
							"id": 409,
							"name": "fontWeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The font-weight CSS property specifies the weight (or boldness) of the font.",
								"text": "The font weights available to you will depend on the font-family you are using. Some fonts are only available in normal and bold.\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 370,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "fontWeights"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 166,
								"name": "FontWeightProps.fontWeight"
							}
						},
						{
							"id": 324,
							"name": "fullWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 63,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 80,
								"name": "BoxProps.fullWidth"
							}
						},
						{
							"id": 368,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The height CSS property specifies the height of an element. By default, the property defines the height of the\ncontent area. If box-sizing is set to border-box, however, it instead determines the height of the border area.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/height)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 503,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.HeightProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 124,
								"name": "HeightProps.height"
							}
						},
						{
							"id": 325,
							"name": "inspect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 64,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 81,
								"name": "BoxProps.inspect"
							}
						},
						{
							"id": 392,
							"name": "justifyContent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The CSS justify-content property defines how the browser distributes space between and around content items\nalong the main-axis of a flex container, and the inline axis of a grid container.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 598,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.JustifyContentProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 148,
								"name": "JustifyContentProps.justifyContent"
							}
						},
						{
							"id": 391,
							"name": "justifyItems",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The CSS justify-items property defines the default justify-self for all items of the box, giving them all\na default way of justifying each box along the appropriate axis.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 586,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.JustifyItemsProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 147,
								"name": "JustifyItemsProps.justifyItems"
							}
						},
						{
							"id": 399,
							"name": "justifySelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The CSS justify-self property set the way a box is justified inside its alignment container along\nthe appropriate axis.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-self)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 656,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.JustifySelfProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 156,
								"name": "JustifySelfProps.justifySelf"
							}
						},
						{
							"id": 305,
							"name": "left",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 44,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 61,
								"name": "BoxProps.left"
							}
						},
						{
							"id": 336,
							"name": "m",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on top, left, bottom and right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 72,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 92,
								"name": "SpaceProps.m"
							}
						},
						{
							"id": 337,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on top, left, bottom and right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 74,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 93,
								"name": "SpaceProps.margin"
							}
						},
						{
							"id": 343,
							"name": "marginBottom",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on bottom"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 86,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 99,
								"name": "SpaceProps.marginBottom"
							}
						},
						{
							"id": 345,
							"name": "marginLeft",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on left"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 90,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 101,
								"name": "SpaceProps.marginLeft"
							}
						},
						{
							"id": 341,
							"name": "marginRight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 82,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 97,
								"name": "SpaceProps.marginRight"
							}
						},
						{
							"id": 339,
							"name": "marginTop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on top"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 78,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 95,
								"name": "SpaceProps.marginTop"
							}
						},
						{
							"id": 347,
							"name": "marginX",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on left and right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 94,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 103,
								"name": "SpaceProps.marginX"
							}
						},
						{
							"id": 349,
							"name": "marginY",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on top and bottom"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 98,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 105,
								"name": "SpaceProps.marginY"
							}
						},
						{
							"id": 376,
							"name": "maxHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The max-height CSS property sets the maximum height of an element. It prevents the used value of the height\nproperty from becoming larger than the value specified for max-height.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/max-height)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 515,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.MaxHeightProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 132,
								"name": "MaxHeightProps.maxHeight"
							}
						},
						{
							"id": 374,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The max-width CSS property sets the maximum width of an element.\nIt prevents the used value of the width property from becoming larger than the value specified by max-width.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 479,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.MaxWidthProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 130,
								"name": "MaxWidthProps.maxWidth"
							}
						},
						{
							"id": 342,
							"name": "mb",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on bottom"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 84,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 98,
								"name": "SpaceProps.mb"
							}
						},
						{
							"id": 372,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The min-height CSS property sets the minimum height of an element. It prevents the used value of the height\nproperty from becoming smaller than the value specified for min-height.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/display)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 527,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.MinHeightProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 128,
								"name": "MinHeightProps.minHeight"
							}
						},
						{
							"id": 370,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The min-width CSS property sets the minimum width of an element.\nIt prevents the used value of the width property from becoming smaller than the value specified for min-width.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/min-width)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 491,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.MinWidthProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 126,
								"name": "MinWidthProps.minWidth"
							}
						},
						{
							"id": 344,
							"name": "ml",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on left"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 88,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 100,
								"name": "SpaceProps.ml"
							}
						},
						{
							"id": 340,
							"name": "mr",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 80,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 96,
								"name": "SpaceProps.mr"
							}
						},
						{
							"id": 338,
							"name": "mt",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on top"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 76,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 94,
								"name": "SpaceProps.mt"
							}
						},
						{
							"id": 346,
							"name": "mx",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on left and right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 92,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 102,
								"name": "SpaceProps.mx"
							}
						},
						{
							"id": 348,
							"name": "my",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on top and bottom"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 96,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 104,
								"name": "SpaceProps.my"
							}
						},
						{
							"id": 319,
							"name": "objectFit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 58,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "CSS.ObjectFitProperty"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 75,
								"name": "BoxProps.objectFit"
							}
						},
						{
							"id": 469,
							"name": "opacity",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The opacity CSS property sets the transparency of an element or the degree to which content\nbehind an element is visible.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/opacity)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1197,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.GlobalsNumber"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 227,
								"name": "OpacityProps.opacity"
							}
						},
						{
							"id": 401,
							"name": "order",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The order CSS property sets the order to lay out an item in a flex or grid container. Items in a container\nare sorted by ascending order value and then by their source code order.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/order)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 682,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.GlobalsNumber"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 158,
								"name": "OrderProps.order"
							}
						},
						{
							"id": 382,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The overflow CSS property sets what to do when an element's content is too big to fit in its block\nformatting context. It is a shorthand for overflow-x and overflow-y.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1209,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.OverflowProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 138,
								"name": "OverflowProps.overflow"
							}
						},
						{
							"id": 383,
							"name": "overflowX",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The overflow-x CSS property sets what shows when content overflows a block-level element's left\nand right edges. This may be nothing, a scroll bar, or the overflow content.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-x)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1216,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.OverflowXProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 139,
								"name": "OverflowProps.overflowX"
							}
						},
						{
							"id": 384,
							"name": "overflowY",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The overflow-y CSS property sets what shows when content overflows a block-level element's top\nand bottom edges. This may be nothing, a scroll bar, or the overflow content.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-y)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1223,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.OverflowYProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 140,
								"name": "OverflowProps.overflowY"
							}
						},
						{
							"id": 350,
							"name": "p",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on top, left, bottom and right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 100,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 106,
								"name": "SpaceProps.p"
							}
						},
						{
							"id": 351,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on top, left, bottom and right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 102,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 107,
								"name": "SpaceProps.padding"
							}
						},
						{
							"id": 357,
							"name": "paddingBottom",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on bottom"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 113,
								"name": "SpaceProps.paddingBottom"
							}
						},
						{
							"id": 359,
							"name": "paddingLeft",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on left"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 118,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 115,
								"name": "SpaceProps.paddingLeft"
							}
						},
						{
							"id": 355,
							"name": "paddingRight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 110,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 111,
								"name": "SpaceProps.paddingRight"
							}
						},
						{
							"id": 353,
							"name": "paddingTop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on top"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 106,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 109,
								"name": "SpaceProps.paddingTop"
							}
						},
						{
							"id": 361,
							"name": "paddingX",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on left and right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 122,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 117,
								"name": "SpaceProps.paddingX"
							}
						},
						{
							"id": 363,
							"name": "paddingY",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on top and bottom"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 126,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 119,
								"name": "SpaceProps.paddingY"
							}
						},
						{
							"id": 356,
							"name": "pb",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on bottom"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 112,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 112,
								"name": "SpaceProps.pb"
							}
						},
						{
							"id": 358,
							"name": "pl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on left"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 116,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 114,
								"name": "SpaceProps.pl"
							}
						},
						{
							"id": 317,
							"name": "pointer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 56,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Boolean"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 73,
								"name": "BoxProps.pointer"
							}
						},
						{
							"id": 333,
							"name": "pointerEvents",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 72,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "CSS.PointerEventsProperty"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 89,
								"name": "BoxProps.pointerEvents"
							}
						},
						{
							"id": 323,
							"name": "position",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 62,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "CSS.PositionProperty"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 79,
								"name": "BoxProps.position"
							}
						},
						{
							"id": 354,
							"name": "pr",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 108,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 110,
								"name": "SpaceProps.pr"
							}
						},
						{
							"id": 352,
							"name": "pt",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on top"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 104,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 108,
								"name": "SpaceProps.pt"
							}
						},
						{
							"id": 360,
							"name": "px",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on left and right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 120,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 116,
								"name": "SpaceProps.px"
							}
						},
						{
							"id": 362,
							"name": "py",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on top and bottom"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 124,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 118,
								"name": "SpaceProps.py"
							}
						},
						{
							"id": 303,
							"name": "random",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Generate random pictures from https://picsum.photos/ for quick demonstration."
							},
							"sources": [
								{
									"fileName": "src/Avatar.tsx",
									"line": 8,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 306,
							"name": "right",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 45,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 62,
								"name": "BoxProps.right"
							}
						},
						{
							"id": 309,
							"name": "row",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 48,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 65,
								"name": "BoxProps.row"
							}
						},
						{
							"id": 312,
							"name": "rowAround",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 51,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 68,
								"name": "BoxProps.rowAround"
							}
						},
						{
							"id": 310,
							"name": "rowBetween",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 49,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 66,
								"name": "BoxProps.rowBetween"
							}
						},
						{
							"id": 314,
							"name": "rowEvenly",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 53,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 70,
								"name": "BoxProps.rowEvenly"
							}
						},
						{
							"id": 381,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 533,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.HeightProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 137,
								"name": "SizeProps.size"
							}
						},
						{
							"id": 302,
							"name": "src",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Avatar.tsx",
									"line": 6,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						},
						{
							"id": 328,
							"name": "stretch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 67,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 84,
								"name": "BoxProps.stretch"
							}
						},
						{
							"id": 433,
							"name": "textAlign",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The text-align CSS property specifies the horizontal alignment of an inline or table-cell box.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 395,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.TextAlignProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 190,
								"name": "TextAlignProps.textAlign"
							}
						},
						{
							"id": 431,
							"name": "textShadow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The `text-shadow` CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied\nto the text and any of its `decorations`. Each shadow is described by some combination of X and Y offsets from\nthe element, blur radius, and color.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1180,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "CSS.TextShadowProperty"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 188,
								"name": "TextShadowProps.textShadow"
							}
						},
						{
							"id": 318,
							"name": "textTransform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 57,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "CSS.TextTransformProperty"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 74,
								"name": "BoxProps.textTransform"
							}
						},
						{
							"id": 307,
							"name": "top",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 46,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 63,
								"name": "BoxProps.top"
							}
						},
						{
							"id": 322,
							"name": "transition",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 61,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reference",
										"name": "CSS.TransitionProperty"
									}
								]
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 78,
								"name": "BoxProps.transition"
							}
						},
						{
							"id": 332,
							"name": "userSelect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 71,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "CSS.UserSelectProperty"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 88,
								"name": "BoxProps.userSelect"
							}
						},
						{
							"id": 379,
							"name": "verticalAlign",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The vertical-align CSS property specifies sets vertical alignment of an inline or table-cell box.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 544,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.VerticalAlignProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 135,
								"name": "VerticalAlignProps.verticalAlign"
							}
						},
						{
							"id": 366,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "  The width utility parses a component's `width` prop and converts it into a CSS width declaration.",
								"text": "  - Numbers from 0-1 are converted to percentage widths.\n  - Numbers greater than 1 are converted to pixel values.\n  - String values are passed as raw CSS values.\n  - And arrays are converted to responsive width styles.\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 467,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.WidthProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 122,
								"name": "WidthProps.width"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								390,
								389,
								400,
								326,
								327,
								414,
								467,
								415,
								419,
								420,
								417,
								466,
								436,
								461,
								453,
								426,
								427,
								447,
								442,
								330,
								451,
								463,
								454,
								448,
								443,
								423,
								459,
								455,
								449,
								444,
								445,
								457,
								452,
								424,
								425,
								446,
								441,
								440,
								437,
								438,
								308,
								429,
								329,
								304,
								313,
								311,
								315,
								316,
								331,
								321,
								377,
								320,
								387,
								398,
								394,
								395,
								396,
								393,
								406,
								404,
								411,
								409,
								324,
								368,
								325,
								392,
								391,
								399,
								305,
								336,
								337,
								343,
								345,
								341,
								339,
								347,
								349,
								376,
								374,
								342,
								372,
								370,
								344,
								340,
								338,
								346,
								348,
								319,
								469,
								401,
								382,
								383,
								384,
								350,
								351,
								357,
								359,
								355,
								353,
								361,
								363,
								356,
								358,
								317,
								333,
								323,
								354,
								352,
								360,
								362,
								303,
								306,
								309,
								312,
								310,
								314,
								381,
								302,
								328,
								433,
								431,
								318,
								307,
								322,
								332,
								379,
								366
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Avatar.tsx",
							"line": 5,
							"character": 28
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 59,
							"name": "BoxProps"
						}
					]
				},
				{
					"id": 470,
					"name": "Avatar",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"signatures": [
						{
							"id": 471,
							"name": "Avatar",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 472,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"originalName": "__0",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 473,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"children": [
												{
													"id": 475,
													"name": "children",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Avatar.tsx",
															"line": 11,
															"character": 53
														}
													],
													"type": {
														"type": "reference",
														"name": "ReactNode"
													}
												},
												{
													"id": 477,
													"name": "props",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Avatar.tsx",
															"line": 11,
															"character": 71
														}
													],
													"type": {
														"type": "reference",
														"id": 263,
														"name": "props"
													}
												},
												{
													"id": 476,
													"name": "random",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Avatar.tsx",
															"line": 11,
															"character": 61
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 474,
													"name": "src",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Avatar.tsx",
															"line": 11,
															"character": 43
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														475,
														477,
														476,
														474
													]
												}
											],
											"sources": [
												{
													"fileName": "src/Avatar.tsx",
													"line": 11,
													"character": 39
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Element"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Avatar.tsx",
							"line": 11,
							"character": 12
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						301
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						470
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Avatar.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 58,
			"name": "\"Box\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/yokiijay/Code/reoil/src/Box.tsx",
			"children": [
				{
					"id": 59,
					"name": "BoxProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"typeParameter": [
						{
							"id": 90,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 91,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 120,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 121,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 123,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 125,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 127,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 129,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 131,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 134,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 136,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 141,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 142,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 144,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 151,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 154,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 159,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 160,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 162,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 164,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 165,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 167,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 169,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 170,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 173,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 175,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 178,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 179,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 185,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 187,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 189,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 191,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 192,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 196,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 207,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 213,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 214,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 216,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 218,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 220,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 222,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						},
						{
							"id": 223,
							"name": "TVal",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							}
						},
						{
							"id": 226,
							"name": "ThemeType",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "Theme"
							}
						}
					],
					"children": [
						{
							"id": 146,
							"name": "alignContent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The CSS align-content property sets how the browser distributes space between and around content items\nalong the cross-axis of a flexbox container, and the main-axis of a grid container.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/align-content)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 574,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.AlignContentProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 146,
								"name": "AlignContentProps.alignContent"
							}
						},
						{
							"id": 145,
							"name": "alignItems",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The CSS align-items property sets the align-self value on all direct children as a group. The align-self\nproperty sets the alignment of an item within its containing block.",
								"text": "In Flexbox it controls the alignment of items on the Cross Axis, in Grid Layout it controls the alignment\nof items on the Block Axis within their grid area.\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/align-items)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 562,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.AlignItemsProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 145,
								"name": "AlignItemsProps.alignItems"
							}
						},
						{
							"id": 157,
							"name": "alignSelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The align-self CSS property aligns flex items of the current flex line overriding the align-items value.",
								"text": "If any of the item's cross-axis margin is set to auto, then align-self is ignored. In Grid layout align-self\naligns the item inside the grid area.\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/align-self)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 670,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.AlignSelfProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 157,
								"name": "AlignSelfProps.alignSelf"
							}
						},
						{
							"id": 82,
							"name": "alignX",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 65,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CSS.JustifyContentProperty"
									},
									{
										"type": "reference",
										"name": "CSS.AlignItemsProperty"
									}
								]
							}
						},
						{
							"id": 83,
							"name": "alignY",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 66,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "reference",
										"name": "CSS.JustifyContentProperty"
									},
									{
										"type": "reference",
										"name": "CSS.AlignItemsProperty"
									}
								]
							}
						},
						{
							"id": 171,
							"name": "background",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The background shorthand CSS property sets all background style properties at once,\nsuch as color, image, origin and size, repeat method, and others.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/background)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1290,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BackgroundProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 171,
								"name": "BackgroundProps.background"
							}
						},
						{
							"id": 225,
							"name": "backgroundColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 322,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "colors"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 225,
								"name": "BackgroundColorProps.backgroundColor"
							}
						},
						{
							"id": 172,
							"name": "backgroundImage",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The background-image CSS property sets one or more background images on an element.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/background-image)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1238,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.BackgroundImageProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 172,
								"name": "BackgroundImageProps.backgroundImage"
							}
						},
						{
							"id": 176,
							"name": "backgroundPosition",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The background-position CSS property sets the initial position for each background image. The\nposition is relative to the position layer set by background-origin.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/background-position)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1262,
									"character": 22
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BackgroundPositionProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 176,
								"name": "BackgroundPositionProps.backgroundPosition"
							}
						},
						{
							"id": 177,
							"name": "backgroundRepeat",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The background-repeat CSS property sets how background images are repeated. A background\nimage can be repeated along the horizontal and vertical axes, or not repeated at all.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/background-repeat)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1274,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.BackgroundRepeatProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 177,
								"name": "BackgroundRepeatProps.backgroundRepeat"
							}
						},
						{
							"id": 174,
							"name": "backgroundSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The background-size CSS property sets the size of the element's background image. The\nimage can be left to its natural size, stretched, or constrained to fit the available space.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/background-size)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1250,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BackgroundSizeProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 174,
								"name": "BackgroundSizeProps.backgroundSize"
							}
						},
						{
							"id": 224,
							"name": "bg",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The color utility parses a component's `color` and `bg` props and converts them into CSS declarations.\nBy default the raw value of the prop is returned.",
								"text": "Color palettes can be configured with the ThemeProvider to use keys as prop values, with support for dot notation.\nArray values are converted into responsive values.\n\n[MDN Reference](https://developer.mozilla.org/en-US/docs/Web/CSS/background-color)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 321,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "colors"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 224,
								"name": "BackgroundColorProps.bg"
							}
						},
						{
							"id": 193,
							"name": "border",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border CSS property sets an element's border. It's a shorthand for border-width, border-style,\nand border-color.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1153,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BorderProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 193,
								"name": "BorderProps.border"
							}
						},
						{
							"id": 219,
							"name": "borderBottom",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-bottom CSS property sets an element's bottom border. It's a shorthand for\nborder-bottom-width, border-bottom-style and border-bottom-color.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1071,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BorderBottomProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 219,
								"name": "BorderBottomProps.borderBottom"
							}
						},
						{
							"id": 210,
							"name": "borderBottomColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-bottom-color CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties border-color or border-bottom.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-color)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1023,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "colors"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 210,
								"name": "BorderColorProps.borderBottomColor"
							}
						},
						{
							"id": 183,
							"name": "borderBottomLeftRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-bottom-left-radius CSS property rounds the bottom-left corner of an element.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-left-radius)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1113,
									"character": 26
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "radii"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"overwrites": {
								"type": "reference",
								"id": 183,
								"name": "BorderRadiusProps.borderBottomLeftRadius"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 183,
								"name": "BorderRadiusProps.borderBottomLeftRadius"
							}
						},
						{
							"id": 184,
							"name": "borderBottomRightRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-bottom-right-radius CSS property rounds the bottom-right corner of an element.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-right-radius)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1119,
									"character": 27
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "radii"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"overwrites": {
								"type": "reference",
								"id": 184,
								"name": "BorderRadiusProps.borderBottomRightRadius"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 184,
								"name": "BorderRadiusProps.borderBottomRightRadius"
							}
						},
						{
							"id": 204,
							"name": "borderBottomStyle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-bottom-style CSS property sets the line style of an element's bottom border.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-style)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 988,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.BorderBottomStyleProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 204,
								"name": "BorderStyleProps.borderBottomStyle"
							}
						},
						{
							"id": 199,
							"name": "borderBottomWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-bottom-width CSS property sets the width of the bottom border of an element.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 953,
									"character": 21
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "borderWidths"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 199,
								"name": "BorderWidthProps.borderBottomWidth"
							}
						},
						{
							"id": 86,
							"name": "borderBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 69,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 208,
							"name": "borderColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-color shorthand CSS property sets the color of all sides of an element's border.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-color)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1011,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "colors"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 208,
								"name": "BorderColorProps.borderColor"
							}
						},
						{
							"id": 221,
							"name": "borderLeft",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-left CSS property is a shorthand that sets the values of border-left-width,\nborder-left-style, and border-left-color. These properties describe an element's left border.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1083,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BorderLeftProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 221,
								"name": "BorderLeftProps.borderLeft"
							}
						},
						{
							"id": 211,
							"name": "borderLeftColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-left-color CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties border-color or border-left.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-color)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1029,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "colors"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 211,
								"name": "BorderColorProps.borderLeftColor"
							}
						},
						{
							"id": 205,
							"name": "borderLeftStyle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-left-style CSS property sets the line style of an element's left border.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-style)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 994,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.BorderLeftStyleProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 205,
								"name": "BorderStyleProps.borderLeftStyle"
							}
						},
						{
							"id": 200,
							"name": "borderLeftWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-left-width CSS property sets the width of the left border of an element.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 959,
									"character": 19
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "borderWidths"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 200,
								"name": "BorderWidthProps.borderLeftWidth"
							}
						},
						{
							"id": 180,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-radius CSS property rounds the corners of an element's outer border edge. You can set a single\nradius to make circular corners, or two radii to make elliptical corners.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1095,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "radii"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"overwrites": {
								"type": "reference",
								"id": 180,
								"name": "BorderRadiusProps.borderRadius"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 180,
								"name": "BorderRadiusProps.borderRadius"
							}
						},
						{
							"id": 217,
							"name": "borderRight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-right CSS property is a shorthand that sets border-right-width, border-right-style,\nand border-right-color. These properties set an element's right border.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1059,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BorderRightProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 217,
								"name": "BorderRightProps.borderRight"
							}
						},
						{
							"id": 212,
							"name": "borderRightColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-right-color CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties border-color or border-right.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-color)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1035,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "colors"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 212,
								"name": "BorderColorProps.borderRightColor"
							}
						},
						{
							"id": 206,
							"name": "borderRightStyle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-right-style CSS property sets the line style of an element's right border.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-style)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1000,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.BorderRightStyleProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 206,
								"name": "BorderStyleProps.borderRightStyle"
							}
						},
						{
							"id": 201,
							"name": "borderRightWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-right-width CSS property sets the width of the right border of an element.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 965,
									"character": 20
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "borderWidths"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 201,
								"name": "BorderWidthProps.borderRightWidth"
							}
						},
						{
							"id": 202,
							"name": "borderStyle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-style shorthand CSS property sets the style of all sides of an element's border.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-style)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 976,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.BorderStyleProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 202,
								"name": "BorderStyleProps.borderStyle"
							}
						},
						{
							"id": 215,
							"name": "borderTop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-top CSS property is a shorthand that sets the values of border-top-width, border-top-style,\nand border-top-color. These properties describe an element's top border.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1047,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BorderTopProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 215,
								"name": "BorderTopProps.borderTop"
							}
						},
						{
							"id": 209,
							"name": "borderTopColor",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-top-color CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties border-color or border-top.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-color)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1017,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "colors"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 209,
								"name": "BorderColorProps.borderTopColor"
							}
						},
						{
							"id": 181,
							"name": "borderTopLeftRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-top-left-radius CSS property rounds the top-left corner of an element.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-left-radius)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1101,
									"character": 23
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "radii"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"overwrites": {
								"type": "reference",
								"id": 181,
								"name": "BorderRadiusProps.borderTopLeftRadius"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 181,
								"name": "BorderRadiusProps.borderTopLeftRadius"
							}
						},
						{
							"id": 182,
							"name": "borderTopRightRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-top-right-radius CSS property rounds the top-right corner of an element.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-right-radius)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1107,
									"character": 24
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "radii"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"overwrites": {
								"type": "reference",
								"id": 182,
								"name": "BorderRadiusProps.borderTopRightRadius"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 182,
								"name": "BorderRadiusProps.borderTopRightRadius"
							}
						},
						{
							"id": 203,
							"name": "borderTopStyle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-top-style CSS property sets the line style of an element's top border.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-style)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 982,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.BorderTopStyleProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 203,
								"name": "BorderStyleProps.borderTopStyle"
							}
						},
						{
							"id": 198,
							"name": "borderTopWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-top-width CSS property sets the width of the top border of an element.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 947,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "borderWidths"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 198,
								"name": "BorderWidthProps.borderTopWidth"
							}
						},
						{
							"id": 197,
							"name": "borderWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The border-width shorthand CSS property sets the width of all sides of an element's border.",
								"text": "[MDN * reference](https://developer.mozilla.org/en-US/docs/Web/CSS/border-width)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 941,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "borderWidths"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType",
													"constraint": {
														"type": "reference",
														"name": "Theme"
													},
													"default": {
														"type": "reference",
														"name": "RequiredTheme"
													}
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 197,
								"name": "BorderWidthProps.borderWidth"
							}
						},
						{
							"id": 194,
							"name": "borderX",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1154,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BorderProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 194,
								"name": "BorderProps.borderX"
							}
						},
						{
							"id": 195,
							"name": "borderY",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1155,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.BorderProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 195,
								"name": "BorderProps.borderY"
							}
						},
						{
							"id": 64,
							"name": "bottom",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 47,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 186,
							"name": "boxShadow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The box-shadow CSS property adds shadow effects around an element's frame. You can set multiple effects separated\nby commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radii and color.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1167,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "CSS.BoxShadowProperty"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 186,
								"name": "BoxShadowProps.boxShadow"
							}
						},
						{
							"id": 85,
							"name": "boxSizing",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 68,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "CSS.BoxSizingProperty"
							}
						},
						{
							"id": 60,
							"name": "center",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 43,
									"character": 8
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 69,
							"name": "colAround",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 52,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 67,
							"name": "colBetween",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 50,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 71,
							"name": "colEvenly",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 54,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 72,
							"name": "color",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 55,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							},
							"overwrites": {
								"type": "reference",
								"name": "TextColorProps.color"
							}
						},
						{
							"id": 87,
							"name": "contentBox",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 70,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 77,
							"name": "cover",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 60,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 133,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The display CSS property defines the display type of an element, which consists of the two basic qualities\nof how an element generates boxes — the outer display type defining how the box participates in flow layout,\nand the inner display type defining how the children of the box are laid out.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/display)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 453,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.DisplayProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 133,
								"name": "DisplayProps.display"
							}
						},
						{
							"id": 76,
							"name": "fit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 59,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "CSS.ObjectFitProperty"
							}
						},
						{
							"id": 143,
							"name": "flex",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The flex CSS property specifies how a flex item will grow or shrink so as to fit the space available in\nits flex container. This is a shorthand property that sets flex-grow, flex-shrink, and flex-basis.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/flex)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 644,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.FlexProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"overwrites": {
								"type": "reference",
								"id": 143,
								"name": "FlexProps.flex"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 143,
								"name": "FlexProps.flex"
							}
						},
						{
							"id": 155,
							"name": "flexBasis",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 620,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.FlexBasisProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 155,
								"name": "FlexBasisProps.flexBasis"
							}
						},
						{
							"id": 150,
							"name": "flexDirection",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The flex-direction CSS property specifies how flex items are placed in the flex container defining the main\naxis and the direction (normal or reversed).",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 632,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.FlexDirectionProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 150,
								"name": "FlexDirectionProps.flexDirection"
							}
						},
						{
							"id": 152,
							"name": "flexGrow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The flex-grow CSS property sets the flex grow factor of a flex item main size. It specifies how much of the\nremaining space in the flex container should be assigned to the item (the flex grow factor).",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 694,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.GlobalsNumber"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 152,
								"name": "FlexGrowProps.flexGrow"
							}
						},
						{
							"id": 153,
							"name": "flexShrink",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The flex-shrink CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger\nthan the flex container, items shrink to fit according to flex-shrink.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-shrink)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 706,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.GlobalsNumber"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 153,
								"name": "FlexShrinkProps.flexShrink"
							}
						},
						{
							"id": 149,
							"name": "flexWrap",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The flex-wrap CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines.\nIf wrapping is allowed, it sets the direction that lines are stacked.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 610,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.FlexWrapProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 149,
								"name": "FlexWrapProps.flexWrap"
							}
						},
						{
							"id": 163,
							"name": "fontFamily",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 357,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.FontFamilyProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 163,
								"name": "FontFamilyProps.fontFamily"
							}
						},
						{
							"id": 161,
							"name": "fontSize",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The fontSize utility parses a component's `fontSize` prop and converts it into a CSS font-size declaration.",
								"text": "- Numbers from 0-8 (or `theme.fontSizes.length`) are converted to values on the [font size scale](#default-theme).\n- Numbers greater than `theme.fontSizes.length` are converted to raw pixel values.\n- String values are passed as raw CSS values.\n- And array values are converted into responsive values.\n\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 351,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "fontSizes"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 161,
								"name": "FontSizeProps.fontSize"
							}
						},
						{
							"id": 168,
							"name": "fontStyle",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The font-style CSS property specifies whether a font should be styled with a normal, italic,\nor oblique face from its font-family.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/font-style)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 407,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.FontStyleProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 168,
								"name": "FontStyleProps.fontStyle"
							}
						},
						{
							"id": 166,
							"name": "fontWeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The font-weight CSS property specifies the weight (or boldness) of the font.",
								"text": "The font weights available to you will depend on the font-family you are using. Some fonts are only available in normal and bold.\n\n[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 370,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "fontWeights"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 166,
								"name": "FontWeightProps.fontWeight"
							}
						},
						{
							"id": 80,
							"name": "fullWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 63,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 124,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The height CSS property specifies the height of an element. By default, the property defines the height of the\ncontent area. If box-sizing is set to border-box, however, it instead determines the height of the border area.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/height)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 503,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.HeightProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 124,
								"name": "HeightProps.height"
							}
						},
						{
							"id": 81,
							"name": "inspect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 64,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 148,
							"name": "justifyContent",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The CSS justify-content property defines how the browser distributes space between and around content items\nalong the main-axis of a flex container, and the inline axis of a grid container.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 598,
									"character": 18
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.JustifyContentProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 148,
								"name": "JustifyContentProps.justifyContent"
							}
						},
						{
							"id": 147,
							"name": "justifyItems",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The CSS justify-items property defines the default justify-self for all items of the box, giving them all\na default way of justifying each box along the appropriate axis.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-items)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 586,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.JustifyItemsProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 147,
								"name": "JustifyItemsProps.justifyItems"
							}
						},
						{
							"id": 156,
							"name": "justifySelf",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The CSS justify-self property set the way a box is justified inside its alignment container along\nthe appropriate axis.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/justify-self)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 656,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.JustifySelfProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 156,
								"name": "JustifySelfProps.justifySelf"
							}
						},
						{
							"id": 61,
							"name": "left",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 44,
									"character": 6
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 92,
							"name": "m",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on top, left, bottom and right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 72,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 92,
								"name": "SpaceProps.m"
							}
						},
						{
							"id": 93,
							"name": "margin",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on top, left, bottom and right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 74,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 93,
								"name": "SpaceProps.margin"
							}
						},
						{
							"id": 99,
							"name": "marginBottom",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on bottom"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 86,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 99,
								"name": "SpaceProps.marginBottom"
							}
						},
						{
							"id": 101,
							"name": "marginLeft",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on left"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 90,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 101,
								"name": "SpaceProps.marginLeft"
							}
						},
						{
							"id": 97,
							"name": "marginRight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 82,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 97,
								"name": "SpaceProps.marginRight"
							}
						},
						{
							"id": 95,
							"name": "marginTop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on top"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 78,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 95,
								"name": "SpaceProps.marginTop"
							}
						},
						{
							"id": 103,
							"name": "marginX",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on left and right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 94,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 103,
								"name": "SpaceProps.marginX"
							}
						},
						{
							"id": 105,
							"name": "marginY",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on top and bottom"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 98,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 105,
								"name": "SpaceProps.marginY"
							}
						},
						{
							"id": 132,
							"name": "maxHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The max-height CSS property sets the maximum height of an element. It prevents the used value of the height\nproperty from becoming larger than the value specified for max-height.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/max-height)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 515,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.MaxHeightProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 132,
								"name": "MaxHeightProps.maxHeight"
							}
						},
						{
							"id": 130,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The max-width CSS property sets the maximum width of an element.\nIt prevents the used value of the width property from becoming larger than the value specified by max-width.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 479,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.MaxWidthProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 130,
								"name": "MaxWidthProps.maxWidth"
							}
						},
						{
							"id": 98,
							"name": "mb",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on bottom"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 84,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 98,
								"name": "SpaceProps.mb"
							}
						},
						{
							"id": 128,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The min-height CSS property sets the minimum height of an element. It prevents the used value of the height\nproperty from becoming smaller than the value specified for min-height.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/display)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 527,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.MinHeightProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 128,
								"name": "MinHeightProps.minHeight"
							}
						},
						{
							"id": 126,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The min-width CSS property sets the minimum width of an element.\nIt prevents the used value of the width property from becoming smaller than the value specified for min-width.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/min-width)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 491,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.MinWidthProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 126,
								"name": "MinWidthProps.minWidth"
							}
						},
						{
							"id": 100,
							"name": "ml",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on left"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 88,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 100,
								"name": "SpaceProps.ml"
							}
						},
						{
							"id": 96,
							"name": "mr",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 80,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 96,
								"name": "SpaceProps.mr"
							}
						},
						{
							"id": 94,
							"name": "mt",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on top"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 76,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 94,
								"name": "SpaceProps.mt"
							}
						},
						{
							"id": 102,
							"name": "mx",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on left and right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 92,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 102,
								"name": "SpaceProps.mx"
							}
						},
						{
							"id": 104,
							"name": "my",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Margin on top and bottom"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 96,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 104,
								"name": "SpaceProps.my"
							}
						},
						{
							"id": 75,
							"name": "objectFit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 58,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "CSS.ObjectFitProperty"
							}
						},
						{
							"id": 227,
							"name": "opacity",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The opacity CSS property sets the transparency of an element or the degree to which content\nbehind an element is visible.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/opacity)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1197,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.GlobalsNumber"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 227,
								"name": "OpacityProps.opacity"
							}
						},
						{
							"id": 158,
							"name": "order",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The order CSS property sets the order to lay out an item in a flex or grid container. Items in a container\nare sorted by ascending order value and then by their source code order.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/order)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 682,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.GlobalsNumber"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 158,
								"name": "OrderProps.order"
							}
						},
						{
							"id": 138,
							"name": "overflow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The overflow CSS property sets what to do when an element's content is too big to fit in its block\nformatting context. It is a shorthand for overflow-x and overflow-y.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1209,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.OverflowProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 138,
								"name": "OverflowProps.overflow"
							}
						},
						{
							"id": 139,
							"name": "overflowX",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The overflow-x CSS property sets what shows when content overflows a block-level element's left\nand right edges. This may be nothing, a scroll bar, or the overflow content.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-x)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1216,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.OverflowXProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 139,
								"name": "OverflowProps.overflowX"
							}
						},
						{
							"id": 140,
							"name": "overflowY",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The overflow-y CSS property sets what shows when content overflows a block-level element's top\nand bottom edges. This may be nothing, a scroll bar, or the overflow content.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-y)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1223,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.OverflowYProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 140,
								"name": "OverflowProps.overflowY"
							}
						},
						{
							"id": 106,
							"name": "p",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on top, left, bottom and right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 100,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 106,
								"name": "SpaceProps.p"
							}
						},
						{
							"id": 107,
							"name": "padding",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on top, left, bottom and right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 102,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 107,
								"name": "SpaceProps.padding"
							}
						},
						{
							"id": 113,
							"name": "paddingBottom",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on bottom"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 114,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 113,
								"name": "SpaceProps.paddingBottom"
							}
						},
						{
							"id": 115,
							"name": "paddingLeft",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on left"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 118,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 115,
								"name": "SpaceProps.paddingLeft"
							}
						},
						{
							"id": 111,
							"name": "paddingRight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 110,
									"character": 16
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 111,
								"name": "SpaceProps.paddingRight"
							}
						},
						{
							"id": 109,
							"name": "paddingTop",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on top"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 106,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 109,
								"name": "SpaceProps.paddingTop"
							}
						},
						{
							"id": 117,
							"name": "paddingX",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on left and right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 122,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 117,
								"name": "SpaceProps.paddingX"
							}
						},
						{
							"id": 119,
							"name": "paddingY",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on top and bottom"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 126,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 119,
								"name": "SpaceProps.paddingY"
							}
						},
						{
							"id": 112,
							"name": "pb",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on bottom"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 112,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 112,
								"name": "SpaceProps.pb"
							}
						},
						{
							"id": 114,
							"name": "pl",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on left"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 116,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 114,
								"name": "SpaceProps.pl"
							}
						},
						{
							"id": 73,
							"name": "pointer",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 56,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"name": "Boolean"
							}
						},
						{
							"id": 89,
							"name": "pointerEvents",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 72,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "CSS.PointerEventsProperty"
							}
						},
						{
							"id": 79,
							"name": "position",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 62,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"name": "CSS.PositionProperty"
							}
						},
						{
							"id": 110,
							"name": "pr",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 108,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 110,
								"name": "SpaceProps.pr"
							}
						},
						{
							"id": 108,
							"name": "pt",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on top"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 104,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 108,
								"name": "SpaceProps.pt"
							}
						},
						{
							"id": 116,
							"name": "px",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on left and right"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 120,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 116,
								"name": "SpaceProps.px"
							}
						},
						{
							"id": 118,
							"name": "py",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "Padding on top and bottom"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 124,
									"character": 6
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "stringLiteral",
													"value": "space"
												},
												{
													"type": "typeParameter",
													"name": "ThemeType"
												}
											],
											"name": "ThemeValue"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 118,
								"name": "SpaceProps.py"
							}
						},
						{
							"id": 62,
							"name": "right",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 45,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 65,
							"name": "row",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 48,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 68,
							"name": "rowAround",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 51,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 66,
							"name": "rowBetween",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 49,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 70,
							"name": "rowEvenly",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 53,
									"character": 11
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 137,
							"name": "size",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 533,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.HeightProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 137,
								"name": "SizeProps.size"
							}
						},
						{
							"id": 84,
							"name": "stretch",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 67,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 190,
							"name": "textAlign",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The text-align CSS property specifies the horizontal alignment of an inline or table-cell box.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/text-align)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 395,
									"character": 13
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"name": "CSS.TextAlignProperty"
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 190,
								"name": "TextAlignProps.textAlign"
							}
						},
						{
							"id": 188,
							"name": "textShadow",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The `text-shadow` CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied\nto the text and any of its `decorations`. Each shadow is described by some combination of X and Y offsets from\nthe element, blur radius, and color.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 1180,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "reference",
												"name": "CSS.TextShadowProperty"
											},
											{
												"type": "intrinsic",
												"name": "number"
											}
										]
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 188,
								"name": "TextShadowProps.textShadow"
							}
						},
						{
							"id": 74,
							"name": "textTransform",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 57,
									"character": 15
								}
							],
							"type": {
								"type": "reference",
								"name": "CSS.TextTransformProperty"
							}
						},
						{
							"id": 63,
							"name": "top",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 46,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "number"
									}
								]
							}
						},
						{
							"id": 78,
							"name": "transition",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 61,
									"character": 12
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "boolean"
									},
									{
										"type": "reference",
										"name": "CSS.TransitionProperty"
									}
								]
							}
						},
						{
							"id": 88,
							"name": "userSelect",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Box.tsx",
									"line": 71,
									"character": 12
								}
							],
							"type": {
								"type": "reference",
								"name": "CSS.UserSelectProperty"
							}
						},
						{
							"id": 135,
							"name": "verticalAlign",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "The vertical-align CSS property specifies sets vertical alignment of an inline or table-cell box.",
								"text": "[MDN reference](https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align)\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 544,
									"character": 17
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.VerticalAlignProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 135,
								"name": "VerticalAlignProps.verticalAlign"
							}
						},
						{
							"id": 122,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"comment": {
								"shortText": "  The width utility parses a component's `width` prop and converts it into a CSS width declaration.",
								"text": "  - Numbers from 0-1 are converted to percentage widths.\n  - Numbers greater than 1 are converted to pixel values.\n  - String values are passed as raw CSS values.\n  - And arrays are converted to responsive width styles.\n"
							},
							"sources": [
								{
									"fileName": "node_modules/@types/styled-system/index.d.ts",
									"line": 467,
									"character": 9
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "TVal",
										"default": {
											"type": "reference",
											"typeArguments": [
												{
													"type": "reference",
													"name": "TLengthStyledSystem"
												}
											],
											"name": "CSS.WidthProperty"
										}
									},
									{
										"type": "typeParameter",
										"name": "ThemeType",
										"constraint": {
											"type": "reference",
											"name": "Theme"
										},
										"default": {
											"type": "reference",
											"name": "RequiredTheme"
										}
									}
								],
								"name": "ResponsiveValue"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 122,
								"name": "WidthProps.width"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								146,
								145,
								157,
								82,
								83,
								171,
								225,
								172,
								176,
								177,
								174,
								224,
								193,
								219,
								210,
								183,
								184,
								204,
								199,
								86,
								208,
								221,
								211,
								205,
								200,
								180,
								217,
								212,
								206,
								201,
								202,
								215,
								209,
								181,
								182,
								203,
								198,
								197,
								194,
								195,
								64,
								186,
								85,
								60,
								69,
								67,
								71,
								72,
								87,
								77,
								133,
								76,
								143,
								155,
								150,
								152,
								153,
								149,
								163,
								161,
								168,
								166,
								80,
								124,
								81,
								148,
								147,
								156,
								61,
								92,
								93,
								99,
								101,
								97,
								95,
								103,
								105,
								132,
								130,
								98,
								128,
								126,
								100,
								96,
								94,
								102,
								104,
								75,
								227,
								158,
								138,
								139,
								140,
								106,
								107,
								113,
								115,
								111,
								109,
								117,
								119,
								112,
								114,
								73,
								89,
								79,
								110,
								108,
								116,
								118,
								62,
								65,
								68,
								66,
								70,
								137,
								84,
								190,
								188,
								74,
								63,
								78,
								88,
								135,
								122
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Box.tsx",
							"line": 42,
							"character": 25
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"id": 264,
							"name": "StyledBoxType"
						},
						{
							"type": "reference",
							"name": "ColorProps"
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"id": 301,
							"name": "AvatarProps"
						}
					]
				},
				{
					"id": 264,
					"name": "StyledBoxType",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Box.tsx",
							"line": 197,
							"character": 18
						}
					],
					"type": {
						"type": "intersection",
						"types": [
							{
								"type": "reference",
								"name": "SpaceProps"
							},
							{
								"type": "reference",
								"name": "LayoutProps"
							},
							{
								"type": "reference",
								"name": "FlexProps"
							},
							{
								"type": "reference",
								"name": "FlexboxProps"
							},
							{
								"type": "reference",
								"name": "FontSizeProps"
							},
							{
								"type": "reference",
								"name": "FontFamilyProps"
							},
							{
								"type": "reference",
								"name": "FontWeightProps"
							},
							{
								"type": "reference",
								"name": "FontStyleProps"
							},
							{
								"type": "reference",
								"name": "BackgroundProps"
							},
							{
								"type": "reference",
								"name": "BorderRadiusProps"
							},
							{
								"type": "reference",
								"name": "BoxShadowProps"
							},
							{
								"type": "reference",
								"name": "TextShadowProps"
							},
							{
								"type": "reference",
								"name": "TextAlignProps"
							},
							{
								"type": "reference",
								"name": "BorderProps"
							}
						]
					},
					"extendedBy": [
						{
							"type": "reference",
							"id": 59,
							"name": "BoxProps"
						}
					]
				},
				{
					"id": 265,
					"name": "StyledBox",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isConst": true
					},
					"sources": [
						{
							"fileName": "src/Box.tsx",
							"line": 213,
							"character": 15
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLDivElement"
											}
										],
										"name": "HTMLAttributes"
									},
									{
										"type": "reference",
										"name": "HTMLDivElement"
									}
								],
								"name": "DetailedHTMLProps"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "reference",
										"id": 264,
										"name": "StyledBoxType"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"typeArguments": [
													{
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "TLengthStyledSystem"
															}
														],
														"name": "Theme"
													}
												],
												"name": "Required"
											},
											{
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "string"
													},
													{
														"type": "intrinsic",
														"name": "number"
													},
													{
														"type": "intrinsic",
														"name": "symbol"
													}
												]
											}
										],
										"name": "ColorProps"
									}
								]
							},
							{
								"type": "intrinsic",
								"name": "object"
							}
						],
						"name": "StyledComponent"
					},
					"defaultValue": "styled.div<StyledBoxType | ColorProps>`\n  ${color}\n  ${layout}\n  ${colorStyle}\n  ${space}\n  ${flex}\n  ${flexbox}\n  ${fontSize}\n  ${fontFamily}\n  ${fontWeight}\n  ${fontStyle}\n  ${background}\n  ${borderRadius}\n  ${boxShadow}\n  ${textShadow}\n  ${textAlign}\n  ${border}\n`"
				},
				{
					"id": 228,
					"name": "Box",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"signatures": [
						{
							"id": 229,
							"name": "Box",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 230,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"originalName": "__0",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 231,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"children": [
												{
													"id": 255,
													"name": "alignX",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 101,
															"character": 8
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 256,
													"name": "alignY",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 102,
															"character": 8
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 259,
													"name": "borderBox",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 105,
															"character": 11
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 239,
													"name": "bottom",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 85,
															"character": 8
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 258,
													"name": "boxSizing",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 104,
															"character": 11
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "stringLiteral",
																"value": "-moz-initial"
															},
															{
																"type": "stringLiteral",
																"value": "inherit"
															},
															{
																"type": "stringLiteral",
																"value": "initial"
															},
															{
																"type": "stringLiteral",
																"value": "revert"
															},
															{
																"type": "stringLiteral",
																"value": "unset"
															},
															{
																"type": "stringLiteral",
																"value": "border-box"
															},
															{
																"type": "stringLiteral",
																"value": "content-box"
															}
														]
													}
												},
												{
													"id": 235,
													"name": "center",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 81,
															"character": 8
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 244,
													"name": "colAround",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 90,
															"character": 11
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 243,
													"name": "colBetween",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 89,
															"character": 12
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 245,
													"name": "colEvenly",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 91,
															"character": 11
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 233,
													"name": "color",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 79,
															"character": 7
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 260,
													"name": "contentBox",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 106,
															"character": 12
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 250,
													"name": "cover",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 96,
															"character": 7
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 249,
													"name": "fit",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 95,
															"character": 5
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "stringLiteral",
																"value": "-moz-initial"
															},
															{
																"type": "stringLiteral",
																"value": "inherit"
															},
															{
																"type": "stringLiteral",
																"value": "initial"
															},
															{
																"type": "stringLiteral",
																"value": "revert"
															},
															{
																"type": "stringLiteral",
																"value": "unset"
															},
															{
																"type": "stringLiteral",
																"value": "none"
															},
															{
																"type": "stringLiteral",
																"value": "contain"
															},
															{
																"type": "stringLiteral",
																"value": "cover"
															},
															{
																"type": "stringLiteral",
																"value": "fill"
															},
															{
																"type": "stringLiteral",
																"value": "scale-down"
															}
														]
													}
												},
												{
													"id": 253,
													"name": "fullWidth",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 99,
															"character": 11
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 254,
													"name": "inspect",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 100,
															"character": 9
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 236,
													"name": "left",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 82,
															"character": 6
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 248,
													"name": "objectFit",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 94,
															"character": 11
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "stringLiteral",
																"value": "-moz-initial"
															},
															{
																"type": "stringLiteral",
																"value": "inherit"
															},
															{
																"type": "stringLiteral",
																"value": "initial"
															},
															{
																"type": "stringLiteral",
																"value": "revert"
															},
															{
																"type": "stringLiteral",
																"value": "unset"
															},
															{
																"type": "stringLiteral",
																"value": "none"
															},
															{
																"type": "stringLiteral",
																"value": "contain"
															},
															{
																"type": "stringLiteral",
																"value": "cover"
															},
															{
																"type": "stringLiteral",
																"value": "fill"
															},
															{
																"type": "stringLiteral",
																"value": "scale-down"
															}
														]
													}
												},
												{
													"id": 246,
													"name": "pointer",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 92,
															"character": 9
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "reference",
																"name": "Boolean"
															}
														]
													}
												},
												{
													"id": 262,
													"name": "pointerEvents",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 108,
															"character": 15
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "stringLiteral",
																"value": "-moz-initial"
															},
															{
																"type": "stringLiteral",
																"value": "inherit"
															},
															{
																"type": "stringLiteral",
																"value": "initial"
															},
															{
																"type": "stringLiteral",
																"value": "revert"
															},
															{
																"type": "stringLiteral",
																"value": "unset"
															},
															{
																"type": "stringLiteral",
																"value": "none"
															},
															{
																"type": "stringLiteral",
																"value": "fill"
															},
															{
																"type": "stringLiteral",
																"value": "all"
															},
															{
																"type": "stringLiteral",
																"value": "auto"
															},
															{
																"type": "stringLiteral",
																"value": "painted"
															},
															{
																"type": "stringLiteral",
																"value": "stroke"
															},
															{
																"type": "stringLiteral",
																"value": "visible"
															},
															{
																"type": "stringLiteral",
																"value": "visibleFill"
															},
															{
																"type": "stringLiteral",
																"value": "visiblePainted"
															},
															{
																"type": "stringLiteral",
																"value": "visibleStroke"
															}
														]
													}
												},
												{
													"id": 252,
													"name": "position",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 98,
															"character": 10
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "stringLiteral",
																"value": "-moz-initial"
															},
															{
																"type": "stringLiteral",
																"value": "inherit"
															},
															{
																"type": "stringLiteral",
																"value": "initial"
															},
															{
																"type": "stringLiteral",
																"value": "revert"
															},
															{
																"type": "stringLiteral",
																"value": "unset"
															},
															{
																"type": "stringLiteral",
																"value": "-webkit-sticky"
															},
															{
																"type": "stringLiteral",
																"value": "absolute"
															},
															{
																"type": "stringLiteral",
																"value": "fixed"
															},
															{
																"type": "stringLiteral",
																"value": "relative"
															},
															{
																"type": "stringLiteral",
																"value": "static"
															},
															{
																"type": "stringLiteral",
																"value": "sticky"
															}
														]
													}
												},
												{
													"id": 263,
													"name": "props",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 109,
															"character": 10
														}
													],
													"type": {
														"type": "reference",
														"id": 263,
														"name": "props"
													}
												},
												{
													"id": 237,
													"name": "right",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 83,
															"character": 7
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 234,
													"name": "row",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 80,
															"character": 5
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 241,
													"name": "rowAround",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 87,
															"character": 11
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 240,
													"name": "rowBetween",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 86,
															"character": 12
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 242,
													"name": "rowEvenly",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 88,
															"character": 11
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 257,
													"name": "stretch",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 103,
															"character": 9
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 232,
													"name": "style",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 78,
															"character": 7
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "reference",
																"name": "CSSProperties"
															}
														]
													}
												},
												{
													"id": 247,
													"name": "textTransform",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 93,
															"character": 15
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "stringLiteral",
																"value": "-moz-initial"
															},
															{
																"type": "stringLiteral",
																"value": "inherit"
															},
															{
																"type": "stringLiteral",
																"value": "initial"
															},
															{
																"type": "stringLiteral",
																"value": "revert"
															},
															{
																"type": "stringLiteral",
																"value": "unset"
															},
															{
																"type": "stringLiteral",
																"value": "capitalize"
															},
															{
																"type": "stringLiteral",
																"value": "full-size-kana"
															},
															{
																"type": "stringLiteral",
																"value": "full-width"
															},
															{
																"type": "stringLiteral",
																"value": "lowercase"
															},
															{
																"type": "stringLiteral",
																"value": "none"
															},
															{
																"type": "stringLiteral",
																"value": "uppercase"
															}
														]
													}
												},
												{
													"id": 238,
													"name": "top",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 84,
															"character": 5
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 251,
													"name": "transition",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 97,
															"character": 12
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 261,
													"name": "userSelect",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Box.tsx",
															"line": 107,
															"character": 12
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "stringLiteral",
																"value": "-moz-initial"
															},
															{
																"type": "stringLiteral",
																"value": "inherit"
															},
															{
																"type": "stringLiteral",
																"value": "initial"
															},
															{
																"type": "stringLiteral",
																"value": "revert"
															},
															{
																"type": "stringLiteral",
																"value": "unset"
															},
															{
																"type": "stringLiteral",
																"value": "none"
															},
															{
																"type": "stringLiteral",
																"value": "contain"
															},
															{
																"type": "stringLiteral",
																"value": "all"
															},
															{
																"type": "stringLiteral",
																"value": "-moz-none"
															},
															{
																"type": "stringLiteral",
																"value": "auto"
															},
															{
																"type": "stringLiteral",
																"value": "element"
															},
															{
																"type": "stringLiteral",
																"value": "text"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														255,
														256,
														259,
														239,
														258,
														235,
														244,
														243,
														245,
														233,
														260,
														250,
														249,
														253,
														254,
														236,
														248,
														246,
														262,
														252,
														263,
														237,
														234,
														241,
														240,
														242,
														257,
														232,
														247,
														238,
														251,
														261
													]
												}
											],
											"sources": [
												{
													"fileName": "src/Box.tsx",
													"line": 77,
													"character": 5
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Element"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Box.tsx",
							"line": 75,
							"character": 9
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						59
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						264
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						265
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						228
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Box.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 266,
			"name": "\"Image\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/yokiijay/Code/reoil/src/Image.tsx",
			"children": [
				{
					"id": 267,
					"name": "ImageProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 280,
							"name": "borderRadius",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Image.tsx",
									"line": 16,
									"character": 14
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "CSS.BorderRadiusProperty"
							}
						},
						{
							"id": 272,
							"name": "cover",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Image.tsx",
									"line": 8,
									"character": 7
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "false"
									},
									{
										"type": "intrinsic",
										"name": "true"
									}
								]
							}
						},
						{
							"id": 279,
							"name": "display",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Image.tsx",
									"line": 15,
									"character": 9
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "inline"
									},
									{
										"type": "stringLiteral",
										"value": "block"
									},
									{
										"type": "stringLiteral",
										"value": "inline-block"
									},
									{
										"type": "stringLiteral",
										"value": "none"
									},
									{
										"type": "stringLiteral",
										"value": "unset"
									},
									{
										"type": "stringLiteral",
										"value": "initial"
									}
								]
							}
						},
						{
							"id": 271,
							"name": "fit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Image.tsx",
									"line": 7,
									"character": 5
								}
							],
							"type": {
								"type": "reference",
								"name": "CSS.ObjectFitProperty"
							}
						},
						{
							"id": 274,
							"name": "height",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Image.tsx",
									"line": 10,
									"character": 8
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "CSS.HeightProperty"
							}
						},
						{
							"id": 278,
							"name": "maxHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Image.tsx",
									"line": 14,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "CSS.MaxHeightProperty"
							}
						},
						{
							"id": 277,
							"name": "maxWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Image.tsx",
									"line": 13,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "CSS.MaxWidthProperty"
							}
						},
						{
							"id": 276,
							"name": "minHeight",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Image.tsx",
									"line": 12,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "CSS.MinHeightProperty"
							}
						},
						{
							"id": 275,
							"name": "minWidth",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Image.tsx",
									"line": 11,
									"character": 10
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "CSS.MinWidthProperty"
							}
						},
						{
							"id": 270,
							"name": "objectFit",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Image.tsx",
									"line": 6,
									"character": 11
								}
							],
							"type": {
								"type": "reference",
								"name": "CSS.ObjectFitProperty"
							}
						},
						{
							"id": 268,
							"name": "src",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Image.tsx",
									"line": 5,
									"character": 5
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "stringLiteral",
										"value": "random"
									},
									{
										"type": "intersection",
										"types": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "reflection",
												"declaration": {
													"id": 269,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Image.tsx",
															"line": 5,
															"character": 26
														}
													]
												}
											}
										]
									}
								]
							}
						},
						{
							"id": 273,
							"name": "width",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true,
								"isOptional": true
							},
							"sources": [
								{
									"fileName": "src/Image.tsx",
									"line": 9,
									"character": 7
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "number"
									}
								],
								"name": "CSS.WidthProperty"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								280,
								272,
								279,
								271,
								274,
								278,
								277,
								276,
								275,
								270,
								268,
								273
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Image.tsx",
							"line": 4,
							"character": 27
						}
					]
				},
				{
					"id": 281,
					"name": "Image",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"signatures": [
						{
							"id": 282,
							"name": "Image",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 283,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"originalName": "__0",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 284,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"children": [
												{
													"id": 287,
													"name": "alt",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Image.tsx",
															"line": 21,
															"character": 5
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 298,
													"name": "borderRadius",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Image.tsx",
															"line": 32,
															"character": 14
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 290,
													"name": "cover",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Image.tsx",
															"line": 24,
															"character": 7
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												},
												{
													"id": 297,
													"name": "display",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Image.tsx",
															"line": 31,
															"character": 9
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "stringLiteral",
																"value": "initial"
															},
															{
																"type": "stringLiteral",
																"value": "unset"
															},
															{
																"type": "stringLiteral",
																"value": "none"
															},
															{
																"type": "stringLiteral",
																"value": "block"
															},
															{
																"type": "stringLiteral",
																"value": "inline"
															},
															{
																"type": "stringLiteral",
																"value": "inline-block"
															}
														]
													}
												},
												{
													"id": 289,
													"name": "fit",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Image.tsx",
															"line": 23,
															"character": 5
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "stringLiteral",
																"value": "-moz-initial"
															},
															{
																"type": "stringLiteral",
																"value": "inherit"
															},
															{
																"type": "stringLiteral",
																"value": "initial"
															},
															{
																"type": "stringLiteral",
																"value": "revert"
															},
															{
																"type": "stringLiteral",
																"value": "unset"
															},
															{
																"type": "stringLiteral",
																"value": "none"
															},
															{
																"type": "stringLiteral",
																"value": "contain"
															},
															{
																"type": "stringLiteral",
																"value": "cover"
															},
															{
																"type": "stringLiteral",
																"value": "fill"
															},
															{
																"type": "stringLiteral",
																"value": "scale-down"
															}
														]
													}
												},
												{
													"id": 291,
													"name": "height",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Image.tsx",
															"line": 25,
															"character": 8
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 296,
													"name": "maxHeight",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Image.tsx",
															"line": 30,
															"character": 11
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 295,
													"name": "maxWidth",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Image.tsx",
															"line": 29,
															"character": 10
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 294,
													"name": "minHeight",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Image.tsx",
															"line": 28,
															"character": 11
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 293,
													"name": "minWidth",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Image.tsx",
															"line": 27,
															"character": 10
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												},
												{
													"id": 288,
													"name": "objectFit",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Image.tsx",
															"line": 22,
															"character": 11
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "stringLiteral",
																"value": "-moz-initial"
															},
															{
																"type": "stringLiteral",
																"value": "inherit"
															},
															{
																"type": "stringLiteral",
																"value": "initial"
															},
															{
																"type": "stringLiteral",
																"value": "revert"
															},
															{
																"type": "stringLiteral",
																"value": "unset"
															},
															{
																"type": "stringLiteral",
																"value": "none"
															},
															{
																"type": "stringLiteral",
																"value": "contain"
															},
															{
																"type": "stringLiteral",
																"value": "cover"
															},
															{
																"type": "stringLiteral",
																"value": "fill"
															},
															{
																"type": "stringLiteral",
																"value": "scale-down"
															}
														]
													}
												},
												{
													"id": 299,
													"name": "props",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Image.tsx",
															"line": 33,
															"character": 10
														}
													],
													"type": {
														"type": "reference",
														"id": 263,
														"name": "props"
													}
												},
												{
													"id": 285,
													"name": "src",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Image.tsx",
															"line": 20,
															"character": 5
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "stringLiteral",
																"value": "random"
															},
															{
																"type": "intersection",
																"types": [
																	{
																		"type": "intrinsic",
																		"name": "string"
																	},
																	{
																		"type": "reflection",
																		"declaration": {
																			"id": 286,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {}
																		}
																	}
																]
															}
														]
													}
												},
												{
													"id": 292,
													"name": "width",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Image.tsx",
															"line": 26,
															"character": 7
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															},
															{
																"type": "intrinsic",
																"name": "number"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														287,
														298,
														290,
														297,
														289,
														291,
														296,
														295,
														294,
														293,
														288,
														299,
														285,
														292
													]
												}
											],
											"sources": [
												{
													"fileName": "src/Image.tsx",
													"line": 19,
													"character": 112
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Element"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Image.tsx",
							"line": 19,
							"character": 11
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						267
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						281
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Image.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 55,
			"name": "\"Inspect\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/yokiijay/Code/reoil/src/Inspect.tsx",
			"children": [
				{
					"id": 56,
					"name": "Inspect",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"signatures": [
						{
							"id": 57,
							"name": "Inspect",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "reference",
								"name": "Element"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Inspect.tsx",
							"line": 5,
							"character": 13
						}
					]
				}
			],
			"groups": [
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						56
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Inspect.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 478,
			"name": "\"Media\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/yokiijay/Code/reoil/src/Media.tsx",
			"children": [
				{
					"id": 479,
					"name": "MediaProps",
					"kind": 256,
					"kindString": "Interface",
					"flags": {
						"isExported": true
					},
					"children": [
						{
							"id": 481,
							"name": "favicon",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Media.tsx",
									"line": 5,
									"character": 9
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 480,
							"name": "title",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isExported": true
							},
							"sources": [
								{
									"fileName": "src/Media.tsx",
									"line": 4,
									"character": 7
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"groups": [
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								481,
								480
							]
						}
					],
					"sources": [
						{
							"fileName": "src/Media.tsx",
							"line": 3,
							"character": 27
						}
					]
				},
				{
					"id": 482,
					"name": "Media",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"signatures": [
						{
							"id": 483,
							"name": "Media",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 484,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"originalName": "__0",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 485,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"children": [
												{
													"id": 487,
													"name": "favicon",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Media.tsx",
															"line": 10,
															"character": 9
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												},
												{
													"id": 486,
													"name": "title",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/Media.tsx",
															"line": 9,
															"character": 7
														}
													],
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														487,
														486
													]
												}
											],
											"sources": [
												{
													"fileName": "src/Media.tsx",
													"line": 8,
													"character": 37
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "Element"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/Media.tsx",
							"line": 8,
							"character": 11
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						479
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						482
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Media.tsx",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 488,
			"name": "\"index\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/yokiijay/Code/reoil/src/index.ts",
			"children": [
				{
					"id": 490,
					"name": "Avatar",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 470
				},
				{
					"id": 489,
					"name": "Box",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 228
				},
				{
					"id": 491,
					"name": "Image",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 281
				},
				{
					"id": 492,
					"name": "Media",
					"kind": 16777216,
					"kindString": "Reference",
					"flags": {
						"isExported": true
					},
					"target": 482
				}
			],
			"groups": [
				{
					"title": "References",
					"kind": 16777216,
					"children": [
						490,
						489,
						491,
						492
					]
				}
			],
			"sources": [
				{
					"fileName": "src/index.ts",
					"line": 1,
					"character": 0
				}
			]
		},
		{
			"id": 1,
			"name": "\"utils/flex\"",
			"kind": 1,
			"kindString": "Module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/yokiijay/Code/reoil/src/utils/flex.ts",
			"children": [
				{
					"id": 11,
					"name": "AlignItemsFN",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"signatures": [
						{
							"id": 12,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 13,
									"name": "parmas",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 14,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 17,
													"name": "alignX",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 36,
															"character": 10
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 35,
																"name": "JustifyContentProps"
															},
															{
																"type": "reference",
																"id": 36,
																"name": "AlignItemsProps"
															}
														]
													}
												},
												{
													"id": 18,
													"name": "alignY",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 37,
															"character": 10
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 35,
																"name": "JustifyContentProps"
															},
															{
																"type": "reference",
																"id": 36,
																"name": "AlignItemsProps"
															}
														]
													}
												},
												{
													"id": 15,
													"name": "childrenPosition",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 34,
															"character": 20
														}
													],
													"type": {
														"type": "reference",
														"id": 20,
														"name": "Position"
													}
												},
												{
													"id": 16,
													"name": "flexDirection",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 35,
															"character": 17
														}
													],
													"type": {
														"type": "reference",
														"id": 34,
														"name": "FlexDirection"
													}
												},
												{
													"id": 19,
													"name": "stretch",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 38,
															"character": 11
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														17,
														18,
														15,
														16,
														19
													]
												}
											],
											"sources": [
												{
													"fileName": "src/utils/flex.ts",
													"line": 33,
													"character": 10
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 36,
								"name": "AlignItemsProps"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/flex.ts",
							"line": 32,
							"character": 22
						}
					]
				},
				{
					"id": 2,
					"name": "JustifyContentFN",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"signatures": [
						{
							"id": 3,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 4,
									"name": "params",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 5,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"children": [
												{
													"id": 8,
													"name": "alignX",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 27,
															"character": 10
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 35,
																"name": "JustifyContentProps"
															},
															{
																"type": "reference",
																"id": 36,
																"name": "AlignItemsProps"
															}
														]
													}
												},
												{
													"id": 9,
													"name": "alignY",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 28,
															"character": 10
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "reference",
																"id": 35,
																"name": "JustifyContentProps"
															},
															{
																"type": "reference",
																"id": 36,
																"name": "AlignItemsProps"
															}
														]
													}
												},
												{
													"id": 6,
													"name": "childrenPosition",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 25,
															"character": 20
														}
													],
													"type": {
														"type": "reference",
														"id": 20,
														"name": "Position"
													}
												},
												{
													"id": 7,
													"name": "flexDirection",
													"kind": 32,
													"kindString": "Variable",
													"flags": {},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 26,
															"character": 17
														}
													],
													"type": {
														"type": "reference",
														"id": 34,
														"name": "FlexDirection"
													}
												},
												{
													"id": 10,
													"name": "stretch",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isOptional": true
													},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 29,
															"character": 11
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														8,
														9,
														6,
														7,
														10
													]
												}
											],
											"sources": [
												{
													"fileName": "src/utils/flex.ts",
													"line": 24,
													"character": 10
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 35,
								"name": "JustifyContentProps"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/flex.ts",
							"line": 23,
							"character": 26
						}
					]
				},
				{
					"id": 36,
					"name": "AlignItemsProps",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/utils/flex.ts",
							"line": 21,
							"character": 27
						}
					],
					"type": {
						"type": "reference",
						"name": "CSS.AlignItemsProperty"
					}
				},
				{
					"id": 34,
					"name": "FlexDirection",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/utils/flex.ts",
							"line": 18,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "CSS.FlexDirectionProperty"
					}
				},
				{
					"id": 35,
					"name": "JustifyContentProps",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {
						"isExported": true
					},
					"sources": [
						{
							"fileName": "src/utils/flex.ts",
							"line": 20,
							"character": 31
						}
					],
					"type": {
						"type": "reference",
						"name": "CSS.JustifyContentProperty"
					}
				},
				{
					"id": 20,
					"name": "Position",
					"kind": 4194304,
					"kindString": "Type alias",
					"flags": {},
					"sources": [
						{
							"fileName": "src/utils/flex.ts",
							"line": 3,
							"character": 13
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 21,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 26,
									"name": "bottom",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/utils/flex.ts",
											"line": 8,
											"character": 8
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "false"
											},
											{
												"type": "intrinsic",
												"name": "true"
											}
										]
									}
								},
								{
									"id": 22,
									"name": "center",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/utils/flex.ts",
											"line": 4,
											"character": 8
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "false"
											},
											{
												"type": "intrinsic",
												"name": "true"
											}
										]
									}
								},
								{
									"id": 31,
									"name": "colAround",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/utils/flex.ts",
											"line": 13,
											"character": 11
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "false"
											},
											{
												"type": "intrinsic",
												"name": "true"
											}
										]
									}
								},
								{
									"id": 29,
									"name": "colBetween",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/utils/flex.ts",
											"line": 11,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "false"
											},
											{
												"type": "intrinsic",
												"name": "true"
											}
										]
									}
								},
								{
									"id": 33,
									"name": "colEvenly",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/utils/flex.ts",
											"line": 15,
											"character": 11
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "false"
											},
											{
												"type": "intrinsic",
												"name": "true"
											}
										]
									}
								},
								{
									"id": 23,
									"name": "left",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/utils/flex.ts",
											"line": 5,
											"character": 6
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "false"
											},
											{
												"type": "intrinsic",
												"name": "true"
											}
										]
									}
								},
								{
									"id": 24,
									"name": "right",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/utils/flex.ts",
											"line": 6,
											"character": 7
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "false"
											},
											{
												"type": "intrinsic",
												"name": "true"
											}
										]
									}
								},
								{
									"id": 27,
									"name": "row",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/utils/flex.ts",
											"line": 9,
											"character": 5
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "false"
											},
											{
												"type": "intrinsic",
												"name": "true"
											}
										]
									}
								},
								{
									"id": 30,
									"name": "rowAround",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/utils/flex.ts",
											"line": 12,
											"character": 11
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "false"
											},
											{
												"type": "intrinsic",
												"name": "true"
											}
										]
									}
								},
								{
									"id": 28,
									"name": "rowBetween",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/utils/flex.ts",
											"line": 10,
											"character": 12
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "false"
											},
											{
												"type": "intrinsic",
												"name": "true"
											}
										]
									}
								},
								{
									"id": 32,
									"name": "rowEvenly",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/utils/flex.ts",
											"line": 14,
											"character": 11
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "false"
											},
											{
												"type": "intrinsic",
												"name": "true"
											}
										]
									}
								},
								{
									"id": 25,
									"name": "top",
									"kind": 32,
									"kindString": "Variable",
									"flags": {
										"isOptional": true
									},
									"sources": [
										{
											"fileName": "src/utils/flex.ts",
											"line": 7,
											"character": 5
										}
									],
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "false"
											},
											{
												"type": "intrinsic",
												"name": "true"
											}
										]
									}
								}
							],
							"groups": [
								{
									"title": "Variables",
									"kind": 32,
									"children": [
										26,
										22,
										31,
										29,
										33,
										23,
										24,
										27,
										30,
										28,
										32,
										25
									]
								}
							],
							"sources": [
								{
									"fileName": "src/utils/flex.ts",
									"line": 3,
									"character": 15
								}
							]
						}
					}
				},
				{
					"id": 46,
					"name": "getComputedAlignItems",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"signatures": [
						{
							"id": 47,
							"name": "getComputedAlignItems",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 48,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"originalName": "__0",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 49,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"children": [
												{
													"id": 52,
													"name": "alignX",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 90,
															"character": 8
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 53,
													"name": "alignY",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 91,
															"character": 8
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 50,
													"name": "childrenPosition",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 88,
															"character": 18
														}
													],
													"type": {
														"type": "reference",
														"id": 20,
														"name": "Position"
													}
												},
												{
													"id": 51,
													"name": "direction",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 89,
															"character": 26
														}
													],
													"type": {
														"type": "reference",
														"name": "FlexDirectionProperty"
													}
												},
												{
													"id": 54,
													"name": "stretch",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 92,
															"character": 9
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														52,
														53,
														50,
														51,
														54
													]
												}
											],
											"sources": [
												{
													"fileName": "src/utils/flex.ts",
													"line": 87,
													"character": 52
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/flex.ts",
							"line": 87,
							"character": 34
						}
					]
				},
				{
					"id": 37,
					"name": "getComputedJustifyContent",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true,
						"isConst": true
					},
					"signatures": [
						{
							"id": 38,
							"name": "getComputedJustifyContent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {
								"isExported": true
							},
							"parameters": [
								{
									"id": 39,
									"name": "__namedParameters",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isExported": true
									},
									"originalName": "__0",
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 40,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {
												"isExported": true
											},
											"children": [
												{
													"id": 43,
													"name": "alignX",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 46,
															"character": 8
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 44,
													"name": "alignY",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 47,
															"character": 8
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "string"
															}
														]
													}
												},
												{
													"id": 41,
													"name": "childrenPosition",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 44,
															"character": 18
														}
													],
													"type": {
														"type": "reference",
														"id": 20,
														"name": "Position"
													}
												},
												{
													"id": 42,
													"name": "direction",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 45,
															"character": 26
														}
													],
													"type": {
														"type": "reference",
														"name": "FlexDirectionProperty"
													}
												},
												{
													"id": 45,
													"name": "stretch",
													"kind": 32,
													"kindString": "Variable",
													"flags": {
														"isExported": true
													},
													"sources": [
														{
															"fileName": "src/utils/flex.ts",
															"line": 48,
															"character": 9
														}
													],
													"type": {
														"type": "union",
														"types": [
															{
																"type": "intrinsic",
																"name": "undefined"
															},
															{
																"type": "intrinsic",
																"name": "false"
															},
															{
																"type": "intrinsic",
																"name": "true"
															}
														]
													}
												}
											],
											"groups": [
												{
													"title": "Variables",
													"kind": 32,
													"children": [
														43,
														44,
														41,
														42,
														45
													]
												}
											],
											"sources": [
												{
													"fileName": "src/utils/flex.ts",
													"line": 43,
													"character": 60
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"sources": [
						{
							"fileName": "src/utils/flex.ts",
							"line": 43,
							"character": 38
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						11,
						2
					]
				},
				{
					"title": "Type aliases",
					"kind": 4194304,
					"children": [
						36,
						34,
						35,
						20
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						46,
						37
					]
				}
			],
			"sources": [
				{
					"fileName": "src/utils/flex.ts",
					"line": 1,
					"character": 0
				}
			]
		}
	],
	"groups": [
		{
			"title": "Modules",
			"kind": 1,
			"children": [
				300,
				58,
				266,
				55,
				478,
				488,
				1
			]
		}
	]
}